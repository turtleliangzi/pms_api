<?php

namespace App\Api\V1\Controllers\Project;

use App\Api\V1\Controllers\BaseController;
use App\Department;
use App\Company;
use App\User;
use App\DepartmentMember;
use App\Project;
use DB;
use JWTAuth;
use Illuminate\Http\Request;
use Swagger\Annotations as SWG;
use App\Api\V1\Transformers\ProjectTransformer;
use App\Api\V1\Transformers\DepartmentMemberTransformer;
use App\Api\V1\Transformers\MemberBasicTransformer;


class ProjectController extends BaseController {

    /** 
     * @SWG\Post(
     * path="/project/add",
     * summary="新增项目",
     * tags={"Projects"},
     * @SWG\Parameter(name="Authorization", in="header", required=true, description="用户凭证", type="string"),
     * @SWG\Parameter(name="project_name", in="query", required=true, description="项目名", type="string"),
     * @SWG\Parameter(name="project_type", in="query", required=true, description="项目类型", type="string"),
     * @SWG\Parameter(name="project_range", in="query", required=true, description="项目等级", type="string"),
     * @SWG\Parameter(name="project_desc", in="query", required=true, description="项目描述", type="string"),
     * @SWG\Parameter(name="etimated_time", in="query", required=true, description="项目预估完成时间", type="string"),
     * @SWG\Response(
     *   response=401,
     *   description="token过期"
     * ),
     * @SWG\Response(
     *   response=400,
     *   description="token无效"
     * ),
     * @SWG\Response(
     *   response=404,
     *   description="用户没找到"
     * ),
     * @SWG\Response(
     *   response=406,
     *   description="无效的请求值"
     * ),
     * @SWG\Response(
     *   response=200,
     *   description="新增项目成功"
     * ),
     * @SWG\Response(
     *   response=500,
     *   description="新增项目失败"
     * ),
     * @SWG\Response(
     *   response="default",
     *   description="an ""unexpected"" error"
     * )
     * )
     */

    public function add(Request $request) {
        if (! $user = JWTAuth::parseToken()->authenticate()) {
            return $this->errorResponse("用户没找到", 404);
        }
        $project = array(
            'project_name' => htmlspecialchars($request->get('project_name')),
            'project_type' => htmlspecialchars($request->get('project_type')),
            'project_range' => htmlspecialchars($request->get('project_range')),
            'project_desc' => htmlspecialchars($request->get('project_desc')),
            'etimated_time' => htmlspecialchars($request->get('etimated_time')),
        );
        $project['company'] = $user['company'];
        $project['project_applicant'] = $user['name'];
        if (empty($project['project_name'])) {
            return $this->errorResponse("项目名不能为空", 406);
        }
        if (empty($project['project_type'])) {
            return $this->errorResponse("项目类型不能为空", 406);
        }
        if (empty($project['project_range'])) {
            return $this->errorResponse("项目等级不能为空", 406);
        }
        if (empty($project['etimated_time'])) {
            return $this->errorResponse("项目预估时间不能为空", 406);
        }

        $result = Project::create($project);
        if (!empty($result)) {
            return $this->successResponse("新增项目成功", 200);
        } else {
            return $this->errorResponse("新增项目失败", 500);
        }

    }

    /** 
     * @SWG\Get(
     * path="/project/get/{kind}",
     * summary="获取未审核/已审核但未分配/已审核且分配/审核不通过的项目",
     * tags={"Projects"},
     * @SWG\Parameter(name="Authorization", in="header", required=true, description="用户凭证", type="string"),
     * @SWG\Parameter(name="kind", in="path", required=true, description="审核状态，0代表未审核，1代表已审核但未分配，2代表已审核且分配，3代表审核不通过", type="integer"),
     * @SWG\Response(
     *   response=401,
     *   description="token过期"
     * ),
     * @SWG\Response(
     *   response=400,
     *   description="token无效"
     * ),
     * @SWG\Response(
     *   response=404,
     *   description="用户没找到"
     * ),
     * @SWG\Response(
     *   response=406,
     *   description="无效的请求值"
     * ),
     * @SWG\Response(
     *   response=200,
     *   description="获取成功"
     * ),
     * @SWG\Response(
     *   response=500,
     *   description="获取失败"
     * ),
     * @SWG\Response(
     *   response="default",
     *   description="an ""unexpected"" error"
     * )
     * )
     */

    public function unaudited($kind) {
        if (! $user = JWTAuth::parseToken()->authenticate()) {
            return $this->errorResponse("用户没找到", 404);
        }
        $kind = (integer)($kind);
        $company = $user['company'];
        $unauditedProject = Project::unauditedProject($company, $kind);
        return $this->response->collection($unauditedProject, new ProjectTransformer);

    }


    /** 
     * @SWG\Post(
     * path="/project/audit",
     * summary="审核项目",
     * tags={"Projects"},
     * @SWG\Parameter(name="Authorization", in="header", required=true, description="用户凭证", type="string"),
     * @SWG\Parameter(name="project_id", in="query", required=true, description="项目id", type="integer"),
     * @SWG\Response(
     *   response=401,
     *   description="token过期"
     * ),
     * @SWG\Response(
     *   response=400,
     *   description="token无效"
     * ),
     * @SWG\Response(
     *   response=404,
     *   description="用户没找到"
     * ),
     * @SWG\Response(
     *   response=406,
     *   description="无效的请求值"
     * ),
     * @SWG\Response(
     *   response=200,
     *   description="审核项目成功"
     * ),
     * @SWG\Response(
     *   response=500,
     *   description="审核项目失败"
     * ),
     * @SWG\Response(
     *   response="default",
     *   description="an ""unexpected"" error"
     * )
     * )
     */

    public function audit(Request $request) {
        if (! $user = JWTAuth::parseToken()->authenticate()) {
            return $this->errorResponse("用户没找到", 404);
        }
        $company = $user['company'];
        $project_id = (integer)($request->get('project_id'));
        $project = Project::getById($project_id);
        if (empty($project)) {
            return $this->errorResponse("项目不存在", 406);
        }
        if ($project['company'] !== $company) {
            return $this->errorResponse("非法访问", 406);
        }
        if ($project['approve_status'] != 0) {
            return $this->errorResponse("该项目不能审核", 406);
        }
        $rs = Project::updateAuditStatus($project_id, array("approve_status"=>1));
        if ($rs === false) {
            return $this->errorResponse("审核失败", 500);
        } else {
            return $this->errorResponse("审核成功", 200);
        }

    }
}
